{"ast":null,"code":"import axios from \"axios\";\nconst apiUrl = \"https://api.openai.com/v1/threads\";\nconst headers = {\n  Authorization: `Bearer ${process.env.REACT_APP_GPT_KEY}`,\n  \"Content-Type\": \"application/json\",\n  \"OpenAI-Beta\": \"assistants=v2\"\n};\nlet sessionId = null;\nexport const createdThread = async prompt => {\n  const payload = {\n    model: \"gpt-4\",\n    messages: [{\n      role: \"user\",\n      content: prompt\n    }]\n  };\n  const response = await axios.post(apiUrl, payload, headers);\n  return response.data;\n};\nexport const fetchChatGPTResponse = async prompt => {\n  const payload = {\n    model: \"gpt-4\",\n    messages: [{\n      role: \"user\",\n      content: prompt\n    }]\n  };\n  if (sessionId) {\n    payload.id = sessionId;\n    console.log(payload.id);\n  }\n  try {\n    const response = await axios.post(apiUrl, payload, {\n      headers: headers\n    });\n    if (!sessionId) {\n      sessionId = response.data.id;\n    } // Store the session ID if it's the first call\n    console.log(\"Full API response:\", response.data);\n    return response.data; // Output from GPT\n    // const response = await axios.post(\n    //   `${BASE_URL}/chat/completions`,\n    //   {\n    //     model: \"gpt-4\", // or any specific model you are using\n    //     messages: [{ role: \"user\", content: prompt }],\n    //   },\n    //   {\n    //     headers: {\n    //       Authorization: `Bearer ${process.env.REACT_APP_GPT_KEY}`,\n    //       \"Content-Type\": \"application/json\",\n    //     },\n    //   }\n    // );\n    // return response.data;\n  } catch (error) {\n    console.error(\"Error calling OpenAI API:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","apiUrl","headers","Authorization","process","env","REACT_APP_GPT_KEY","sessionId","createdThread","prompt","payload","model","messages","role","content","response","post","data","fetchChatGPTResponse","id","console","log","error"],"sources":["/Users/wavydang/Desktop/GitDesktop/Bitcamp24/app/frontend/src/api.js"],"sourcesContent":["import axios from \"axios\";\n\nconst apiUrl = \"https://api.openai.com/v1/threads\";\nconst headers = {\n  Authorization: `Bearer ${process.env.REACT_APP_GPT_KEY}`,\n  \"Content-Type\": \"application/json\",\n  \"OpenAI-Beta\": \"assistants=v2\",\n};\nlet sessionId = null;\n\nexport const createdThread = async (prompt) => {\n  const payload = {\n    model: \"gpt-4\",\n    messages: [{ role: \"user\", content: prompt }],\n  };\n  const response = await axios.post(apiUrl, payload, headers);\n  return response.data;\n};\nexport const fetchChatGPTResponse = async (prompt) => {\n  const payload = {\n    model: \"gpt-4\",\n    messages: [{ role: \"user\", content: prompt }],\n  };\n  if (sessionId) {\n    payload.id = sessionId;\n    console.log(payload.id);\n  }\n\n  try {\n    const response = await axios.post(apiUrl, payload, { headers: headers });\n    if (!sessionId) {\n      sessionId = response.data.id;\n    } // Store the session ID if it's the first call\n    console.log(\"Full API response:\", response.data);\n    return response.data; // Output from GPT\n    // const response = await axios.post(\n    //   `${BASE_URL}/chat/completions`,\n    //   {\n    //     model: \"gpt-4\", // or any specific model you are using\n    //     messages: [{ role: \"user\", content: prompt }],\n    //   },\n    //   {\n    //     headers: {\n    //       Authorization: `Bearer ${process.env.REACT_APP_GPT_KEY}`,\n    //       \"Content-Type\": \"application/json\",\n    //     },\n    //   }\n    // );\n    // return response.data;\n  } catch (error) {\n    console.error(\"Error calling OpenAI API:\", error);\n    throw error;\n  }\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,MAAM,GAAG,mCAAmC;AAClD,MAAMC,OAAO,GAAG;EACdC,aAAa,EAAG,UAASC,OAAO,CAACC,GAAG,CAACC,iBAAkB,EAAC;EACxD,cAAc,EAAE,kBAAkB;EAClC,aAAa,EAAE;AACjB,CAAC;AACD,IAAIC,SAAS,GAAG,IAAI;AAEpB,OAAO,MAAMC,aAAa,GAAG,MAAOC,MAAM,IAAK;EAC7C,MAAMC,OAAO,GAAG;IACdC,KAAK,EAAE,OAAO;IACdC,QAAQ,EAAE,CAAC;MAAEC,IAAI,EAAE,MAAM;MAAEC,OAAO,EAAEL;IAAO,CAAC;EAC9C,CAAC;EACD,MAAMM,QAAQ,GAAG,MAAMf,KAAK,CAACgB,IAAI,CAACf,MAAM,EAAES,OAAO,EAAER,OAAO,CAAC;EAC3D,OAAOa,QAAQ,CAACE,IAAI;AACtB,CAAC;AACD,OAAO,MAAMC,oBAAoB,GAAG,MAAOT,MAAM,IAAK;EACpD,MAAMC,OAAO,GAAG;IACdC,KAAK,EAAE,OAAO;IACdC,QAAQ,EAAE,CAAC;MAAEC,IAAI,EAAE,MAAM;MAAEC,OAAO,EAAEL;IAAO,CAAC;EAC9C,CAAC;EACD,IAAIF,SAAS,EAAE;IACbG,OAAO,CAACS,EAAE,GAAGZ,SAAS;IACtBa,OAAO,CAACC,GAAG,CAACX,OAAO,CAACS,EAAE,CAAC;EACzB;EAEA,IAAI;IACF,MAAMJ,QAAQ,GAAG,MAAMf,KAAK,CAACgB,IAAI,CAACf,MAAM,EAAES,OAAO,EAAE;MAAER,OAAO,EAAEA;IAAQ,CAAC,CAAC;IACxE,IAAI,CAACK,SAAS,EAAE;MACdA,SAAS,GAAGQ,QAAQ,CAACE,IAAI,CAACE,EAAE;IAC9B,CAAC,CAAC;IACFC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEN,QAAQ,CAACE,IAAI,CAAC;IAChD,OAAOF,QAAQ,CAACE,IAAI,CAAC,CAAC;IACtB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACF,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}