{"ast":null,"code":"import axios from \"axios\";\nconst apiUrl = \"https://api.openai.com/v1/chat/completions\";\nconst headers = {\n  Authorization: `Bearer ${process.env.REACT_APP_GPT_KEY}`,\n  \"Content-Type\": \"application/json\"\n};\nlet sessionId = null;\nexport const fetchChatGPTResponse = async prompt => {\n  const payload = {\n    model: \"gpt-4\",\n    messages: [{\n      role: \"user\",\n      content: prompt\n    }]\n  };\n  if (sessionId) {\n    payload.session_id = sessionId;\n    console.log(payload.session_id);\n  }\n  try {\n    const response = await axios.post(apiUrl, payload, {\n      headers: headers\n    });\n    if (!sessionId) {\n      sessionId = response.data.session_id;\n      console.log(sessionId);\n    } // Store the session ID if it's the first call\n    return response.data; // Output from GPT\n    // const response = await axios.post(\n    //   `${BASE_URL}/chat/completions`,\n    //   {\n    //     model: \"gpt-4\", // or any specific model you are using\n    //     messages: [{ role: \"user\", content: prompt }],\n    //   },\n    //   {\n    //     headers: {\n    //       Authorization: `Bearer ${process.env.REACT_APP_GPT_KEY}`,\n    //       \"Content-Type\": \"application/json\",\n    //     },\n    //   }\n    // );\n    // return response.data;\n  } catch (error) {\n    console.error(\"Error calling OpenAI API:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","apiUrl","headers","Authorization","process","env","REACT_APP_GPT_KEY","sessionId","fetchChatGPTResponse","prompt","payload","model","messages","role","content","session_id","console","log","response","post","data","error"],"sources":["/Users/wavydang/Desktop/GitDesktop/Bitcamp24/app/frontend/src/api.js"],"sourcesContent":["import axios from \"axios\";\n\nconst apiUrl = \"https://api.openai.com/v1/chat/completions\";\nconst headers = {\n  Authorization: `Bearer ${process.env.REACT_APP_GPT_KEY}`,\n  \"Content-Type\": \"application/json\",\n};\nlet sessionId = null;\nexport const fetchChatGPTResponse = async (prompt) => {\n  const payload = {\n    model: \"gpt-4\",\n    messages: [{ role: \"user\", content: prompt }],\n  };\n  if (sessionId) {\n    payload.session_id = sessionId;\n    console.log(payload.session_id);\n  }\n\n  try {\n    const response = await axios.post(apiUrl, payload, { headers: headers });\n    if (!sessionId) {\n      sessionId = response.data.session_id;\n      console.log(sessionId);\n    } // Store the session ID if it's the first call\n    return response.data; // Output from GPT\n    // const response = await axios.post(\n    //   `${BASE_URL}/chat/completions`,\n    //   {\n    //     model: \"gpt-4\", // or any specific model you are using\n    //     messages: [{ role: \"user\", content: prompt }],\n    //   },\n    //   {\n    //     headers: {\n    //       Authorization: `Bearer ${process.env.REACT_APP_GPT_KEY}`,\n    //       \"Content-Type\": \"application/json\",\n    //     },\n    //   }\n    // );\n    // return response.data;\n  } catch (error) {\n    console.error(\"Error calling OpenAI API:\", error);\n    throw error;\n  }\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,MAAM,GAAG,4CAA4C;AAC3D,MAAMC,OAAO,GAAG;EACdC,aAAa,EAAG,UAASC,OAAO,CAACC,GAAG,CAACC,iBAAkB,EAAC;EACxD,cAAc,EAAE;AAClB,CAAC;AACD,IAAIC,SAAS,GAAG,IAAI;AACpB,OAAO,MAAMC,oBAAoB,GAAG,MAAOC,MAAM,IAAK;EACpD,MAAMC,OAAO,GAAG;IACdC,KAAK,EAAE,OAAO;IACdC,QAAQ,EAAE,CAAC;MAAEC,IAAI,EAAE,MAAM;MAAEC,OAAO,EAAEL;IAAO,CAAC;EAC9C,CAAC;EACD,IAAIF,SAAS,EAAE;IACbG,OAAO,CAACK,UAAU,GAAGR,SAAS;IAC9BS,OAAO,CAACC,GAAG,CAACP,OAAO,CAACK,UAAU,CAAC;EACjC;EAEA,IAAI;IACF,MAAMG,QAAQ,GAAG,MAAMlB,KAAK,CAACmB,IAAI,CAAClB,MAAM,EAAES,OAAO,EAAE;MAAER,OAAO,EAAEA;IAAQ,CAAC,CAAC;IACxE,IAAI,CAACK,SAAS,EAAE;MACdA,SAAS,GAAGW,QAAQ,CAACE,IAAI,CAACL,UAAU;MACpCC,OAAO,CAACC,GAAG,CAACV,SAAS,CAAC;IACxB,CAAC,CAAC;IACF,OAAOW,QAAQ,CAACE,IAAI,CAAC,CAAC;IACtB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdL,OAAO,CAACK,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}