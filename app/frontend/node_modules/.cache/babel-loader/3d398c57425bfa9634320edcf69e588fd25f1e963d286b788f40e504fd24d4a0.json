{"ast":null,"code":"import axios from \"axios\";\nconst apiUrl = \"https://api.openai.com/v1/threads\";\nconst headers = {\n  Authorization: `Bearer ${process.env.REACT_APP_GPT_KEY}`,\n  \"Content-Type\": \"application/json\",\n  \"OpenAI-Beta\": \"assistants=v2\"\n};\nlet sessionId = null;\nexport const createdThread = async prompt => {\n  console.log(\"create\");\n  const payload = {\n    model: \"gpt-4\",\n    messages: [{\n      role: \"user\",\n      content: prompt\n    }]\n  };\n  const config = {\n    headers: headers\n  };\n  const response = await axios.post(apiUrl, payload, config);\n  console.log(response);\n  sessionId = response.data.id;\n  return response.data;\n};\nexport const moreThread = async prompt => {\n  const payload = {\n    model: \"gpt-4\",\n    messages: [{\n      role: \"user\",\n      content: prompt\n    }]\n  };\n  const response = await axios.get(`${apiUrl}/${sessionId}`, payload, headers);\n  console.log(response);\n  return response.data; // Returns the thread object\n};\n\n// export const fetchChatGPTResponse = async (prompt) => {\n//   const payload = {\n//     model: \"gpt-4\",\n//     messages: [{ role: \"user\", content: prompt }],\n//   };\n//   if (sessionId) {\n//     payload.id = sessionId;\n//     console.log(payload.id);\n//   }\n\n//   try {\n//     const response = await axios.post(apiUrl, payload, { headers: headers });\n//     if (!sessionId) {\n//       sessionId = response.data.id;\n//     } // Store the session ID if it's the first call\n//     console.log(\"Full API response:\", response.data);\n//     return response.data; // Output from GPT\n//     // const response = await axios.post(\n//     //   `${BASE_URL}/chat/completions`,\n//     //   {\n//     //     model: \"gpt-4\", // or any specific model you are using\n//     //     messages: [{ role: \"user\", content: prompt }],\n//     //   },\n//     //   {\n//     //     headers: {\n//     //       Authorization: `Bearer ${process.env.REACT_APP_GPT_KEY}`,\n//     //       \"Content-Type\": \"application/json\",\n//     //     },\n//     //   }\n//     // );\n//     // return response.data;\n//   } catch (error) {\n//     console.error(\"Error calling OpenAI API:\", error);\n//     throw error;\n//   }\n// };","map":{"version":3,"names":["axios","apiUrl","headers","Authorization","process","env","REACT_APP_GPT_KEY","sessionId","createdThread","prompt","console","log","payload","model","messages","role","content","config","response","post","data","id","moreThread","get"],"sources":["/Users/wavydang/Desktop/GitDesktop/Bitcamp24/app/frontend/src/api.js"],"sourcesContent":["import axios from \"axios\";\n\nconst apiUrl = \"https://api.openai.com/v1/threads\";\nconst headers = {\n  Authorization: `Bearer ${process.env.REACT_APP_GPT_KEY}`,\n  \"Content-Type\": \"application/json\",\n  \"OpenAI-Beta\": \"assistants=v2\",\n};\nlet sessionId = null;\n\nexport const createdThread = async (prompt) => {\n  console.log(\"create\");\n  const payload = {\n    model: \"gpt-4\",\n    messages: [{ role: \"user\", content: prompt }],\n  };\n  const config = {\n    headers: headers,\n  };\n\n  const response = await axios.post(apiUrl, payload, config);\n  console.log(response);\n  sessionId = response.data.id;\n  return response.data;\n};\n\nexport const moreThread = async (prompt) => {\n  const payload = {\n    model: \"gpt-4\",\n    messages: [{ role: \"user\", content: prompt }],\n  };\n  const response = await axios.get(`${apiUrl}/${sessionId}`, payload, headers);\n  console.log(response);\n  return response.data; // Returns the thread object\n};\n\n// export const fetchChatGPTResponse = async (prompt) => {\n//   const payload = {\n//     model: \"gpt-4\",\n//     messages: [{ role: \"user\", content: prompt }],\n//   };\n//   if (sessionId) {\n//     payload.id = sessionId;\n//     console.log(payload.id);\n//   }\n\n//   try {\n//     const response = await axios.post(apiUrl, payload, { headers: headers });\n//     if (!sessionId) {\n//       sessionId = response.data.id;\n//     } // Store the session ID if it's the first call\n//     console.log(\"Full API response:\", response.data);\n//     return response.data; // Output from GPT\n//     // const response = await axios.post(\n//     //   `${BASE_URL}/chat/completions`,\n//     //   {\n//     //     model: \"gpt-4\", // or any specific model you are using\n//     //     messages: [{ role: \"user\", content: prompt }],\n//     //   },\n//     //   {\n//     //     headers: {\n//     //       Authorization: `Bearer ${process.env.REACT_APP_GPT_KEY}`,\n//     //       \"Content-Type\": \"application/json\",\n//     //     },\n//     //   }\n//     // );\n//     // return response.data;\n//   } catch (error) {\n//     console.error(\"Error calling OpenAI API:\", error);\n//     throw error;\n//   }\n// };\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,MAAM,GAAG,mCAAmC;AAClD,MAAMC,OAAO,GAAG;EACdC,aAAa,EAAG,UAASC,OAAO,CAACC,GAAG,CAACC,iBAAkB,EAAC;EACxD,cAAc,EAAE,kBAAkB;EAClC,aAAa,EAAE;AACjB,CAAC;AACD,IAAIC,SAAS,GAAG,IAAI;AAEpB,OAAO,MAAMC,aAAa,GAAG,MAAOC,MAAM,IAAK;EAC7CC,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;EACrB,MAAMC,OAAO,GAAG;IACdC,KAAK,EAAE,OAAO;IACdC,QAAQ,EAAE,CAAC;MAAEC,IAAI,EAAE,MAAM;MAAEC,OAAO,EAAEP;IAAO,CAAC;EAC9C,CAAC;EACD,MAAMQ,MAAM,GAAG;IACbf,OAAO,EAAEA;EACX,CAAC;EAED,MAAMgB,QAAQ,GAAG,MAAMlB,KAAK,CAACmB,IAAI,CAAClB,MAAM,EAAEW,OAAO,EAAEK,MAAM,CAAC;EAC1DP,OAAO,CAACC,GAAG,CAACO,QAAQ,CAAC;EACrBX,SAAS,GAAGW,QAAQ,CAACE,IAAI,CAACC,EAAE;EAC5B,OAAOH,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAME,UAAU,GAAG,MAAOb,MAAM,IAAK;EAC1C,MAAMG,OAAO,GAAG;IACdC,KAAK,EAAE,OAAO;IACdC,QAAQ,EAAE,CAAC;MAAEC,IAAI,EAAE,MAAM;MAAEC,OAAO,EAAEP;IAAO,CAAC;EAC9C,CAAC;EACD,MAAMS,QAAQ,GAAG,MAAMlB,KAAK,CAACuB,GAAG,CAAE,GAAEtB,MAAO,IAAGM,SAAU,EAAC,EAAEK,OAAO,EAAEV,OAAO,CAAC;EAC5EQ,OAAO,CAACC,GAAG,CAACO,QAAQ,CAAC;EACrB,OAAOA,QAAQ,CAACE,IAAI,CAAC,CAAC;AACxB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}